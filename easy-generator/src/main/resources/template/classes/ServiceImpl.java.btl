package ${config.packagePath}.service.impl;

<% for(import in serviceImpl.imports!){ %>
import ${import.name};
<% } %>
import ${config.packagePath}.model.${config.modelName};
import ${config.packagePath}.service.${config.modelName}Service;
import ${config.packagePath}.dao.${config.modelName}Mapper;

/**
 * ${config.businessName}
 *
 * @author ${config.author}
 * @date ${config.date}
 */
@Service
public class ${config.modelName}ServiceImpl extends ServiceImpl<${config.modelName}Mapper, ${config.modelName}> implements ${config.modelName}Service<% if(config.isGeneratorMethodsImport){ %> ,ImportService<% }%> {

    <% if(config.isGeneratorMethodsSelect){ %>
    /**
     * 列表
     * @param object 查询条
     * @param page   分页
     * @return Page<${config.modelName}>
     */
    @Override
    public Page<${config.modelName}> select(${config.modelName} object, Page<${config.modelName}> page) {
        QueryWrapper<${config.modelName}> queryWrapper = new QueryWrapper<>();
        if(object != null){
            // 查询条件
            <% if(config.queryItems != null) { %>
            <% for(fieldSet in config.queryItems){ %>
            // ${fieldSet.label}
            if (Validator.isNotEmpty(object.get${strUtil.upperFirst(fieldSet.propertyName)}())) {
                <% if('gte' == fieldSet.matchingMode) { %>
                queryWrapper.ge("t.${fieldSet.columnName}", object.get${strUtil.upperFirst(fieldSet.propertyName)}());
                <% } else if('lte' == fieldSet.matchingMode) {%>
                queryWrapper.le("t.${fieldSet.columnName}", object.get${strUtil.upperFirst(fieldSet.propertyName)}());
                <% } else if('left_like' == fieldSet.matchingMode) {%>
                queryWrapper.likeLeft("t.${fieldSet.columnName}", object.get${strUtil.upperFirst(fieldSet.propertyName)}());
                <% } else if('right_like' == fieldSet.matchingMode) {%>
                queryWrapper.likeRight("t.${fieldSet.columnName}", object.get${strUtil.upperFirst(fieldSet.propertyName)}());
                <% } else {%>
                queryWrapper.${fieldSet.matchingMode}("t.${fieldSet.columnName}", object.get${strUtil.upperFirst(fieldSet.propertyName)}());
                <% } %>
            }
            <% } %>
            <% } %>
        }
        page.setRecords(baseMapper.select(page, queryWrapper));
        return page;
    }

    /**
     * 详情
     *
     * @param id id
     * @return ${config.modelName}
     */
    @Override
    public ${config.modelName} get(String id) {
        ToolUtil.checkParams(id);
        return baseMapper.getById(id);
    }
    <% } %>
    <% if(config.isGeneratorMethodsAdd){ %>

    /**
     * 新增
     *
     * @return ${config.modelName}
     */
    @Override
    public ${config.modelName} add() {
        ${config.modelName} object = new ${config.modelName}();
        // 设置默认值
        return object;
    }
    <% } %>
    <% if(config.isGeneratorMethodsRemove){ %>

    /**
     * 删除
     *
     * @param ids 数据ids
     * @return true/false
     */
    @Transactional(rollbackFor = RuntimeException.class)
    @Override
    public boolean remove(String ids) {
        ToolUtil.checkParams(ids);
        List<String> idList = Arrays.asList(ids.split(","));
        return removeByIds(idList);
    }
    <% } %>
    <% if(config.isGeneratorMethodsSave){ %>

    /**
     * 保存
     *
     * @param object 表单内容
     * @return ${config.modelName}
     */
    @Transactional(rollbackFor = RuntimeException.class)
    @Override
    public ${config.modelName} saveData(${config.modelName} object) {
        ToolUtil.checkParams(object);
        if (Validator.isEmpty(object.getId())) {
            // 新增,设置默认值
        }
        return (${config.modelName}) ToolUtil.checkResult(saveOrUpdate(object), object);
    }
    <% } %>

    <% if(config.isGeneratorMethodsImport){ %>
    /**
     * 验证数据，插入临时表后调用
     * 注: 返回false会触发异常回滚
     *
     * @param templateId 模板id
     * @param userId 用户id
     * @return true/false
     */
    @Override
    public boolean verificationData(String templateId, String userId) {
        return true;
    }

    /**
     * 导入前回调，插入正式表之前会调用此方法，建议导入正式表之前使用次方法再次验证数据，防止验证 ~ 导入之间数据发送变动
     * 注: 返回false会触发异常回滚
     *
     * @param templateId 模板id
     * @param userId 用户id
     * @return true/false
     */
    @Override
    public boolean beforeImport(String templateId, String userId) {
        return true;
    }

    /**
     * 导入后回调，插入正式表后会调用此方法
     * 注: 返回false会触发异常回滚
     *
     * @return true/false
     */
    @Override
    public boolean afterImport() {
        return true;
    }
    <% }%>

    <% if(config.isGeneratorMethodsExport){ %>
    @Override
    public String exportData(${config.modelName} object) {
        QueryWrapper<${config.modelName}> queryWrapper = new QueryWrapper<>();
        if(object != null){
            // 查询条件
            <% if(config.queryItems != null) { %>
            <% for(fieldSet in config.queryItems){ %>
            // ${fieldSet.label}
            if (Validator.isNotEmpty(object.get${strUtil.upperFirst(fieldSet.propertyName)}())) {
                <% if('gte' == fieldSet.matchingMode) { %>
                queryWrapper.ge("t.${fieldSet.columnName}", object.get${strUtil.upperFirst(fieldSet.propertyName)}());
                <% } else if('lte' == fieldSet.matchingMode) {%>
                queryWrapper.le("t.${fieldSet.columnName}", object.get${strUtil.upperFirst(fieldSet.propertyName)}());
                <% } else if('left_like' == fieldSet.matchingMode) {%>
                queryWrapper.likeLeft("t.${fieldSet.columnName}", object.get${strUtil.upperFirst(fieldSet.propertyName)}());
                <% } else if('right_like' == fieldSet.matchingMode) {%>
                queryWrapper.likeRight("t.${fieldSet.columnName}", object.get${strUtil.upperFirst(fieldSet.propertyName)}());
                <% } else {%>
                queryWrapper.${fieldSet.matchingMode}("t.${fieldSet.columnName}", object.get${strUtil.upperFirst(fieldSet.propertyName)}());
                <% } %>
            }
            <% } %>
            <% } %>
        }
        List<${config.modelName}> list = baseMapper.exportData(queryWrapper);
        return ExcelUtil.writeAndGetDownloadId("${config.businessName}", "${config.businessName}", list, ${config.modelName}.class);
    }
    <% } %>
}