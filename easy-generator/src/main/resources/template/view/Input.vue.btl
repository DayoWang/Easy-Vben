<template>
  <BasicDrawer
    v-bind="$attrs"
    @register="registerDrawer"
    showFooter
    title="${basicsConfig.businessName}"
    width="30%"
    @ok="handleSubmit"
  >
    <BasicForm @register="registerForm" />
    <% if(basicsConfig.generatorMethodsAdd){ %>
    <template #appendFooter>
      <a-button type="primary" @click="handleSaveAndAdd">
        <Icon icon="ant-design:plus-outlined" />
        保存并新增
      </a-button>
    </template>
    <% } %>
  </BasicDrawer>
</template>
<script lang="ts">
  import { defineComponent, nextTick, ref } from 'vue';
  import { BasicForm, useForm } from '/@/components/Form';
  import { BasicDrawer, useDrawerInner } from '/@/components/Drawer';
  import { Icon } from '/@/components/Icon';
  import { ${GeneratorVueUtil.getInputImport(basicsConfig)} } from '${apiTsPath! != null ? apiTsPath : 'todo: Api Path'}';
  import { ${basicsConfig.modelName} } from '${modelTsPath! != null ? modelTsPath : 'todo: Model Path' }';
  export default defineComponent({
    name: '${basicsConfig.modelName}Input',
    components: { Icon, BasicForm, BasicDrawer },
    emits: ['success', 'register'],
    setup(_, { emit }) {
      const id = ref();
      const version = ref();

      const [registerForm, { resetFields, setFieldsValue, validate }] = useForm({
        labelWidth: 100,
        schemas: [
          <% if(tableConfig != null) { %>
          <% for(item in inputConfig){ %>
          {
            field: '${item.propertyName}',
            label: '${item.label}',
            <% if(item.required != null && item.required) { %>
            required: true,
            <% } %>
            component: '${item.componentType}',
            <% if(strUtil.isNotBlank(item.dictType)) { %>
            componentProps: {
              dictType: '${item.dictType}',
            },
            <% } %>
            <% if(item.propertyType == 'String' && strUtil.isBlank(item.dictType)) { %>
            <% columnLength = GeneratorUtil.getColumnLength(item); %>
            <% if(columnLength != null) { %>
            rules: [{ max: ${columnLength}, message: '${item.label}不能超过${columnLength}个字符', trigger: 'blur' }],
            <% } %>
            <% } else if(item.propertyType == 'Integer' || item.propertyType == 'Long' || item.propertyType == 'Double') {%>
            rules: [
              { type: 'number', max: 9999, message: '${item.label}不能大于9999', trigger: 'blur' },
              { type: 'number', min: 0, message: '${item.label}不能小于0', trigger: 'blur' },
            ],
            <% } %>
            <% customComponents = ['ApiCascader', 'ApiRadioGroup', 'ApiSelect', 'ApiTree', 'ApiTreeSelect', 'DictCascader', 'DictCheckbox', 'DictRadio', 'DictSelect']; %>
            <% if(array.contain(customComponents, item.componentType)) { %>
            itemProps: { validateTrigger: 'blur' },
            <% } %>
          },
          <% } %>
          <% } %>
        ],
        showActionButtonGroup: false,
        baseColProps: { md: 24 },
      });

      const [registerDrawer, { changeLoading, closeDrawer }] = useDrawerInner(async (data) => {
        changeLoading(true);
        // 重置表单
        await resetFields();
        id.value = data?.id;
        version.value = data?.version || 0;

        await setFieldsValue({
          ...data,
        });
        changeLoading(false);
      });

      async function handleSave(callback: (_: ${basicsConfig.modelName}) => any) {
        try {
          changeLoading(true);
          const values = await validate();
          await save({ ...values, id: id.value, version: version.value }).then((res) => {
            emit('success');
            callback(res);
          });
        } catch (e) {
          console.error(e);
          changeLoading(false);
        }
      }

      async function handleSubmit() {
        await handleSave((_) => {
          changeLoading(false);
          closeDrawer();
        });
      }

      <% if(basicsConfig.generatorMethodsAdd){ %>
      async function handleSaveAndAdd() {
        await handleSave(() => {
          nextTick(() => {
            add().then(async (data) => {
              // 重置表单
              await resetFields();
              id.value = null;
              version.value = null;
              await setFieldsValue({
                ...data,
              });
              changeLoading(false);
            });
          });
        });
      }

      <% } %>
      return { registerDrawer, registerForm, handleSubmit, handleSaveAndAdd };
    },
  });
</script>
